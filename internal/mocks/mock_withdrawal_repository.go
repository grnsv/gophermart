// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grnsv/gophermart/internal/storage (interfaces: WithdrawalRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/grnsv/gophermart/internal/models"
)

// MockWithdrawalRepository is a mock of WithdrawalRepository interface.
type MockWithdrawalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalRepositoryMockRecorder
}

// MockWithdrawalRepositoryMockRecorder is the mock recorder for MockWithdrawalRepository.
type MockWithdrawalRepositoryMockRecorder struct {
	mock *MockWithdrawalRepository
}

// NewMockWithdrawalRepository creates a new mock instance.
func NewMockWithdrawalRepository(ctrl *gomock.Controller) *MockWithdrawalRepository {
	mock := &MockWithdrawalRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalRepository) EXPECT() *MockWithdrawalRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWithdrawalRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWithdrawalRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWithdrawalRepository)(nil).Close))
}

// CreateWithdrawal mocks base method.
func (m *MockWithdrawalRepository) CreateWithdrawal(arg0 context.Context, arg1 *models.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal.
func (mr *MockWithdrawalRepositoryMockRecorder) CreateWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockWithdrawalRepository)(nil).CreateWithdrawal), arg0, arg1)
}

// GetBalance mocks base method.
func (m *MockWithdrawalRepository) GetBalance(arg0 context.Context, arg1 string) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWithdrawalRepositoryMockRecorder) GetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWithdrawalRepository)(nil).GetBalance), arg0, arg1)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockWithdrawalRepository) GetWithdrawalsByUserID(arg0 context.Context, arg1 string) ([]*models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockWithdrawalRepositoryMockRecorder) GetWithdrawalsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockWithdrawalRepository)(nil).GetWithdrawalsByUserID), arg0, arg1)
}
